<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <contextName>logback</contextName>

    <property name="LOG_PATH" value="./logs"/>
    <property name="LOG_PATTERN_WITH_LEN" value="%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%L] %logger{36} - %.-1024msg%n"/>
    <property name="LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%L] %logger{36} -%msg%n"/>
    <!--日志文件输出格式   %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n
        %d{HH: mm:ss.SSS}——日志输出时间
        %thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用
        %-5level——日志级别，并且使用5个字符靠左对齐
        %L——行号
        %logger{36}——日志输出者的名字
        %msg——日志消息
        %n——平台的换行符
       -->
    <!-- ThresholdFilter 过滤掉低于指定临界值的事件 .
        当记录的级别等于或高于临界值时 , ThresholdFilter 的decide()方法会返回NEUTRAL ;
        当记录级别低于临界值时 , 事件会被拒绝 -->

    <!--输出到控制台-->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>info</level>
        </filter>
        <encoder>
            <pattern>${LOG_PATTERN_WITH_LEN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!--输出到文件-->
    <appender name="BIZ_FILE" class="ch.qos.logback.core.FileAppender">
        <file>${LOG_PATH}/biz.log</file>
        <!-- 如果是true , 日志被追加到文件结尾 , 如果是false,清空现存文件 , 默认是true -->
        <append>false</append>
      <!--  <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>info</level>
        </filter>-->
        <encoder>
            <pattern>${LOG_PATTERN_WITH_LEN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!--输出到滚动文件-->
    <!-- 时间滚动输出 level为 DEBUG 日志 -->
    <appender name="DEBUG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <!--先将今天的日志保存在这个文件中-->
        <file>${LOG_PATH}/log_debug.log</file>
        <encoder>
            <pattern>${LOG_PATTERN}</pattern>
            <charset>UTF-8</charset> <!-- 设置字符集 -->
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- rollover daily -->
            <!--如果第二天输出日志,会将当天的日志记录在<file>${ LOG_PATH}/log_debug.log</file>,然后将昨天的日志归档到下面的文件中-->
            <!--以分钟切分  %d{yyyy-MM-dd_HH-mm}-->
            <fileNamePattern>${LOG_PATH}/debug/log-debug-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- each file should be at most 100MB, keep 60 days worth of history, but at most 20GB -->
            <!--单个日志文件最大100M，到了这个值，就会再创建一个日志文件，日志文件的名字最后+1-->
            <maxFileSize>100MB</maxFileSize>
            <!--日志文件保留天数-->
            <maxHistory>15</maxHistory>
            <!--所有的日志文件最大20G，超过就会删除旧的日志-->
            <totalSizeCap>10GB</totalSizeCap>
        </rollingPolicy>
        <!--
            LevelFilter 根据记录级别对记录事件进行过滤。如果事件的级别等于配置的级别，过滤 器会根据 onMatch 和 onMismatch 属性接受或拒绝事件
            此日志文件只记录debug级别的
            onMatch和onMismatch都有三个属性值，分别为Accept、DENY和NEUTRAL
            onMatch="ACCEPT" 表示匹配该级别及
            onMatch="DENY" 表示不匹配该级别
            onMatch="NEUTRAL" 表示该级别及以上的，由下一个filter处理，如果当前是最后一个，则表示匹配该级别及以上
            onMismatch="ACCEPT" 表示匹配非该级别的
            onMismatch="NEUTRAL" 表示非该级别的，由下一个filter处理，如果当前是最后一个，则不匹配该级别以下的
            onMismatch="DENY" 表示不匹配非该级别的
        -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>debug</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 时间滚动输出 level为 INFO 日志 -->
    <appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/log_info.log</file>
        <encoder>
            <pattern>${LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/info/log-info-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxFileSize>100MB</maxFileSize>
            <maxHistory>15</maxHistory>
            <totalSizeCap>10GB</totalSizeCap>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>info</level>
            <onMatch>NEUTRAL</onMatch>
            <onMismatch>NEUTRAL</onMismatch>
        </filter>
    </appender>

    <!-- 时间滚动输出 level为 WARN 日志 -->
    <appender name="WARN_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/log_warn.log</file>
        <encoder>
            <pattern>${LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/warn/log-warn-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxFileSize>100MB</maxFileSize>
            <maxHistory>15</maxHistory>
            <totalSizeCap>10GB</totalSizeCap>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>warn</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 时间滚动输出 level为 ERROR 日志 -->
    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/log_error.log</file>
        <encoder>
            <pattern>${LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/error/log-error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxFileSize>100MB</maxFileSize>
            <maxHistory>15</maxHistory>
            <totalSizeCap>10GB</totalSizeCap>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>


    <!-- 根节点配置 -->
    <!--    <root level="DEBUG">-->
    <!--        <appender-ref ref="CONSOLE" />-->
    <!--        <appender-ref ref="DEBUG_FILE" />-->
    <!--        <appender-ref ref="INFO_FILE" />-->
    <!--        <appender-ref ref="WARN_FILE" />-->
    <!--        <appender-ref ref="ERROR_FILE" />-->
    <!--    </root>-->


    <!--
    name:用来指定受此loger约束的某一个包或者具体的某一个类。
    addtivity:是否向上级loger(root的appender)传递打印信息。默认是true。
    就是logger下的appender和root下的appender都会打印一遍。如果两个appender是同一个，就会打印两遍？
    因为mybatis打印的sql日志是debug级别的，如果将所有的debug都打印出来会特别乱，
    所以特意指定mybatis的日志为debug，其他的为info
-->
    <!--    <logger name="com.citicsf.xcapp" level="debug" additivity="false">-->
    <!--        <appender-ref ref="CONSOLE" />-->
    <!--        <appender-ref ref="DEBUG_FILE" />-->
    <!--        <appender-ref ref="INFO_FILE" />-->
    <!--        <appender-ref ref="WARN_FILE" />-->
    <!--        <appender-ref ref="ERROR_FILE" />-->
    <!--    </logger>-->
    <!--    <logger name="org.mybatis" level="debug" additivity="false">-->
    <!--        <appender-ref ref="CONSOLE" />-->
    <!--        <appender-ref ref="DEBUG_FILE" />-->
    <!--        <appender-ref ref="INFO_FILE" />-->
    <!--        <appender-ref ref="WARN_FILE" />-->
    <!--        <appender-ref ref="ERROR_FILE" />-->
    <!--    </logger>-->



    <!--配置多环境日志输出  可以在application.properties中配置选择哪个profiles : spring.profiles.active=dev-->
    <!--本地环境:打印控制台-->
    <springProfile name="local">
        <logger name="com.citicsf.xcapp" level="debug" additivity="false">
            <appender-ref ref="CONSOLE" />
        </logger>
        <logger name="org.mybatis" level="debug" additivity="false">
            <appender-ref ref="CONSOLE" />
        </logger>
        <root level="debug">
            <appender-ref ref="CONSOLE" />
        </root>
    </springProfile>
    <springProfile name="dev">
        <logger name="com.citicsf.xcapp" level="debug">
        </logger>
        <logger name="org.mybatis" level="debug">
        </logger>
        <root level="info">
            <appender-ref ref="CONSOLE" />
            <appender-ref ref="BIZ_FILE" />
        </root>
    </springProfile>
    <!--生产环境:输出到文件-->
    <springProfile name="sit,uat,prod,uatn,sitn">
        <logger name="com.citicsf.xcapp.fundopen.dao" level="debug">
        </logger>
        <logger name="org.mybatis" level="debug">
        </logger>
        <root level="info">
            <appender-ref ref="CONSOLE" />
            <appender-ref ref="BIZ_FILE" />
            <appender-ref ref="DEBUG_FILE" />
            <appender-ref ref="INFO_FILE" />
            <appender-ref ref="ERROR_FILE" />
            <appender-ref ref="WARN_FILE" />
        </root>
    </springProfile>



</configuration>